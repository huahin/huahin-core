{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Huahin is simple Java framework for Hadoop MapReduce.","body":"## Huahin Core\r\nHuahin is simple Java framework for Hadoop MapReduce.\r\nHuahin can developement easily than normal MapReduce.\r\nHuahin is unlike Hive and Pig, are purpose to be develop flexible native Java MapReduce.\r\n\r\n## Prerequisites\r\nHuahin is based on MapReduce programs written on 0.20.x, 0.22.x, 1.0.x version(MRv1) of Hadoop.\r\n\r\n## Overview\r\nHuahin is a framework that wraps the MapReduce. If there is a lack of features,\r\nyou can also write directly because it is written in Java.\r\n\r\nLater in this tutorial will introduce sprinkled with a simple example.\r\n\r\nDetails or run of MapReduce, please refer to the tutorial of MapReduce.(http://hadoop.apache.org/mapreduce/)\r\n\r\n## Releases\r\ncurrent version is 0.1.3.\r\n\r\n#### 12 Sep, 2012: Release 0.1.3 available\r\n* update: minor upgrade.\r\n* add: meta data setting.\r\n* supported input data separator regex.\r\n\r\n#### 20 Aug, 2012: Release 0.1.2 available\r\n* add: Easily supports the Join. However, you must be a size master data appear in the memory of the task.\r\n\r\n#### 30 July, 2012: Release 0.1.1 available\r\n* update: Performance improvement.\r\n* update: Combiner supported. If you specified a Combiner, In-Mapper Combiner is set automatically.\r\n\r\n#### 28 Jun, 2012: Release 0.1.0 available\r\nThis is the first version.\r\n\r\n## Install\r\nGets the jar using maven.\r\n```\r\n<dependency>\r\n  <groupId>org.huahinframework</groupId>\r\n  <artifactId>huahin-core</artifactId>\r\n  <version>x.x.x</version>\r\n</dependency>\r\n```\r\n\r\nOr, get the source code.\r\n```\r\ngit clone git://github.com/huahin/huahin-core.git\r\n```\r\n\r\n## Example: URL path page view\r\nThis example is intended to summarize the page views of the path from the log of the Web Server.\r\nData format is \"USER, DATE, REFERRER, URL\" in TSV format.\r\n\r\nSource Code: PathFileter.java\r\n```\r\npublic class PathFileter extends Filter {\r\n  @Override\r\n  public void init() {\r\n  }\r\n\r\n  @Override\r\n  public void filter(Record record, Writer writer)\r\n      throws IOException, InterruptedException {\r\n    String url = record.getValueString(\"URL\");\r\n    URI uri = URI.create(url);\r\n    String path = uri.getPath();\r\n    if (path == null) {\r\n      return;\r\n    }\r\n\r\n    String user = record.getValueString(\"USER\");\r\n    String date = StringUtil.split(record.getValueString(\"DATE\"), \" \", true)[0];\r\n\r\n    Record emitRecord = new Record();\r\n    emitRecord.addGrouping(\"DATE\", date);\r\n    emitRecord.addGrouping(\"PATH\", path);\r\n    emitRecord.addValue(\"USER\", user);\r\n    writer.write(emitRecord);\r\n  }\r\n\r\n  @Override\r\n  public void filterSetup() {\r\n  }\r\n}\r\n```\r\n\r\nFilter is an abstract class change to Mapper. Filter class is processed by filter method.\r\nRecord the parameters of the filter method will contain the Value and Key.\r\nTo get the value specifies the type and label. Writer is used to write the Record.\r\n\r\nRecord using the Writer to write, you specify groups, values, and the sort.\r\n\r\nFilter#init method is called before each filter is called.\r\n\r\nFilter#fileterSetup method is called once at the beginning of the task.\r\n\r\n\r\nSource Code: PathSummarizer.java\r\n```\r\npublic class PathSummarizer extends Summarizer {\r\n  @Override\r\n  public void init() {\r\n  }\r\n\r\n  @Override\r\n  public void summarize(Writer writer)\r\n      throws IOException, InterruptedException {\r\n    int pv = 0;\r\n    while (hasNext()) {\r\n      next(writer);\r\n      pv++;\r\n    }\r\n\r\n    Record emitRecord = new Record();\r\n    emitRecord.addValue(\"PV\", pv);\r\n    writer.write(emitRecord);\r\n  }\r\n\r\n  @Override\r\n  public void summarizerSetup() {\r\n  }\r\n}\r\n```\r\n\r\nSummarizer is an abstract class change to Reducer. Summarizer class is processed by summarize method.\r\nCall the Summarizer#next method in Summarizer, to get the Record.\r\nThe end of the Record decision, use the Summarizer#hasNext method.\r\nThis specification is similar to the iterator of Java.\r\n\r\nRecord the parameters of the summarize method will contain the Value and Key.\r\nTo get the value specifies the type and label. Writer is used to write the Record.\r\nRecord using the Writer to write, you specify groups, values, and the sort.\r\n\r\nSummarizer#init method is called for each group.\r\n\r\nSummarizer#summarizerSetup method is called once at the beginning of the task.\r\n\r\n\r\nSource Code: PathPVJobTool.java\r\n```\r\npublic class PathPVJobTool extends SimpleJobTool {\r\n  @Override\r\n  protected String setInputPath(String[] args) {\r\n    return args[0];\r\n  }\r\n\r\n  @Override\r\n  protected String setOutputPath(String[] args) {\r\n    return args[1];\r\n  }\r\n\r\n  @Override\r\n  protected void setup() throws Exception {\r\n    final String[] labels = new String[] { \"USER\", \"DATE\", \"REFERER\", \"URL\" };\r\n\r\n    SimpleJob job = addJob(labels, StringUtil.TAB);\r\n    job.setFilter(PathFileter.class);\r\n    job.setSummarizer(PathSummarizer.class);\r\n  }\r\n}\r\n```\r\n\r\nTo configure the Job, you will create a tool that inherit from this class.\r\nSet the input path of HDFS in SimpleJobTool#setInputPath method.\r\nSet the output path of HDFS in SimpleJobTool#setOutputPath method.\r\n\r\nSet up a job in the SimpleJobTool#setup method.\r\nAdd a job in the addJob method, set the Fileter in setFilter, to set the Summarizer in setSummarizer.\r\n\r\nFor more information, check the Javadoc.\r\n\r\n\r\nSource Code: Jobs.java\r\n```\r\npublic class Jobs {\r\n  public static void main(String[] args) {\r\n    if (args.length != 3) {\r\n      System.err.println(\"[jobName] args...\");\r\n      System.exit(-1);\r\n    }\r\n\r\n    // Remove the leading argument and call run\r\n    String jobName = args[0];\r\n    String[] newArgs = new String[args.length - 1];\r\n    for (int i = 1; i < args.length; ++i) {\r\n      newArgs[i - 1] = args[i];\r\n    }\r\n\r\n    Runner runner = new Runner();\r\n    runner.addJob(\"PathPV\", PathPVJobTool.class);\r\n\r\n    int status = runner.run(jobName, newArgs);\r\n    System.exit(status);\r\n  }\r\n}\r\n```\r\nRunner can be called easily the Job. Add the name and Job in JobTool addJob method.\r\nTo run the job, you call the run out by specifying the Job name and parameters you have just registered.\r\nIn this example, delete the name of Job from the startup parameters, and set the run parameters.\r\n\r\nFor more information, check the Huahin Examples.\r\n\r\n### Support or Contact\r\nContact huahin-framework@googlegroups.com and weâ€™ll help you sort it out.","name":"Huahin Core","google":"UA-32923864-1"}